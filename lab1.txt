----------------------------------------------
student table 
----------------------------------------------

CREATE TABLE students7 (
    std_id INT PRIMARY KEY,
    First_name VARCHAR(50) not null,
	midle_name VARCHAR(50) not null,
	last_name VARCHAR(50) not null,
	age INT not null,
    course VARCHAR(20) not null,
    DOB date not null
);

INSERT INTO students7 (std_id, First_name, midle_name, last_name, age, course, DOB)
VALUES (1, 'vivek', 'chinmay', 'R', 21, 'MCA', TO_DATE('16-JUN-2004', 'DD-MON-YYYY'));
  
INSERT INTO students7 (std_id, First_name, midle_name, last_name, age, course, DOB)
VALUES (2, 'Bhuvan', 'nadigar', 'V', 22, 'MCA', TO_DATE('30-JUL-2004', 'DD-MON-YYYY'));

INSERT INTO students7 (std_id, First_name, midle_name, last_name, age, course, DOB)
VALUES (3, 'Alok', 'kumar', 'R', 21, 'MCA', TO_DATE('11-JUN-2004', 'DD-MON-YYYY'));

INSERT INTO students7 (std_id, First_name, midle_name, last_name, age, course, DOB)
VALUES (4, 'yuva', 'rajkumar', 's', 21, 'MCA', TO_DATE('21-JAN-2004', 'DD-MON-YYYY'));

INSERT INTO students7 (std_id, First_name, midle_name, last_name, age, course, DOB)
VALUES (5, 'mighty', 'raju', 'K', 22, 'MCA', TO_DATE('17-NOV-2004', 'DD-MON-YYYY'));

--------------------------------------------
course table 
--------------------------------------------

CREATE TABLE course7 (
    crs_id INT PRIMARY KEY,
	std_id INT,
	course_name VARCHAR(20),
    DeptName VARCHAR(50),
	FOREIGN KEY (std_id) REFERENCES students7(std_id)
);


INSERT INTO course7 (crs_id, std_id, course_name, DeptName) 
VALUES (101, 1, 'Database Systems', 'Computer Science');

INSERT INTO course7 (crs_id, std_id, course_name, DeptName) 
VALUES (102, 2, 'Networking', 'Information Technology');

INSERT INTO course7 (crs_id, std_id, course_name, DeptName) 
VALUES (103, 3, 'Operating Systems', 'Computer Science');

INSERT INTO course7 (crs_id, std_id, course_name, DeptName) 
VALUES (104, 4, 'Data Structures', 'Software Engineering');

INSERT INTO course7 (crs_id, std_id, course_name, DeptName) 
VALUES (105, 5, 'AI', 'Computer Science');

--------------------------------
SUB QUERIES:
--------------------------------

1. FIND STUDENTS OLDER THAN THE AVERAGE AGE 
=> SELECT  First_name,age from students7 where age>(select AVG(age) from students7);

2. LIST OF STUDENTS ENROLLED IN ATLEAST ONE COURSE
=> select  First_name from students7 where std_id in (select std_id from course7);

3. GET STUDENTS NOT ENROLLED IN ANY COURSE
=> select  First_name from students7 where std_id NOT IN (select std_id from course7);

4. FIND THE YOUNGEST STUDENT'S NAME
=> SELECT  First_name from students7 where age=(select min(age) from students7);

5. FIND THE oldest STUDENT'S NAME
=> SELECT  First_name from students7 where age=(select max(age) from students7);

6. FIND ALL COURSES TAKEN BY VIVEK
=> select course_name from course7 where std_id = (select std_id from students7 where First_name= 'vivek');

7. COUNT HOW MANY COURSES EACH STUDENT HAS (using corellated subquery)
=> select s.First_name, (select count(*) from course7 sc where sc.std_id=s.std_id) as course_count from students7 s;

8. FIND STUDENTS WHO ARE TAKING THE SAME COURSE AS VIVEK
=> select First_name from students7 where std_id in (select std_id from course7 where course_name in(select course_name from course7 where std_id=(select std_id from students7 where First_name='vivek')));

9. GET NAMES OF STUDENTS WHO ARE ENROLLED IN MORE THAN 1 COURSE

=> select First_name from students7 where std_id in (select std_id from course7 group by std_id having count(crs_id)>1);
